import configparser
import numpy as np
import tensorflow as tf
from models.unet_variants import *
from models.fpn_variants import *


class model_selector:
    def __init__(self, 
                 model_genre,
                 encoder_name,
                 decoder_name, 
                 imlength, 
                 imwidth, 
                 model_width, 
                 model_depth, 
                 num_channels=3, 
                 output_nums=1, 
                 ds=0, 
                 ae=0, 
                 ag=0, 
                 lstm=0, 
                 dense_loop=1, 
                 feature_number=1024, 
                 is_transconv=True, 
                 alpha=1.0, 
                 q=3, 
                 final_activation="sigmoid", 
                 train_mode='pretrained_encoder', 
                 is_base_model_trainable=False
                 ):
        # model_genre: Generation or Genre of the Model: UNet, FPN, LinkNet, etc.
        # encoder_name: Name of the encoder model e.g., ResNet50, InceptionV3, etc.
        # decoder_name: Name of the decoder model e.g., UNet, UNet++, etc.
        # length: Input Image Length (x-dim)
        # width: Input Image Width (y-dim) [Normally same as the x-dim i.e., Square shape]
        # model_width: Width of the Input Layer of the Model
        # num_channels: Number of Channels in the model
        # output_nums: Output Classes (Classification Mode) or Features (Regression Mode)
        # ds: Checks where Deep Supervision is active or not, either 0 or 1 [Default value set as 0]
        # ag: Checks where Attention Guided is active or not, either 0 or 1 [Default value set as 0]
        # ae: Enables or diables the AutoEncoder Mode, either 0 or 1 [Default value set as 0]
        # lstm: Checks where Bidirectional LSTM is active or not, either 0 or 1 [Default value set as 0]
        # dense_loop: Number of Dense Block in the most bottom layers (1 and 3 are defaults for the UNet's latent layer)
        # feature_number: Number of Features or Embeddings to be extracted from the AutoEncoder in the A_E Mode
        # is_transconv: (TRUE - Transposed Convolution, FALSE - UpSampling) in the Encoder Layer
        # alpha: This Parameter is only for MultiResUNet, default value is 1
        # train_mode: Training Mode for the Network [pretrained_encoder: use pretrained weights (e.g., ImageNet), from_scratch: Start training from scratch]
        # is_base_model_trainable: (TRUE: Fine Tuning mode, FALSE: Freeze Mode)
        # q: q-order for ONNs
        self.model_genre = model_genre
        self.encoder_name = encoder_name
        self.decoder_name = decoder_name
        self.imlength = imlength
        self.imwidth = imwidth
        self.model_depth = model_depth
        self.model_width = model_width
        self.num_channels = num_channels
        self.output_nums = output_nums
        self.D_S = ds
        self.A_E = ae
        self.A_G = ag
        self.LSTM = lstm
        self.dense_loop = dense_loop
        self.feature_number = feature_number
        self.is_transconv = is_transconv
        self.final_activation = final_activation
        self.train_mode = train_mode
        self.is_base_model_trainable = is_base_model_trainable
        self.alpha = alpha
        self.q = q
    def segmentation_model(self):
        segmentation_model = None
        if (self.model_genre == "UNet") or (self.model_genre == "unet") or (self.model_genre == "U-Net"):
            if (self.encoder_name == "ResNet50") or (self.encoder_name == "resnet50"):
                segmentation_model = unet_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        dense_loop=self.dense_loop,
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).ResNet50()
            elif (self.encoder_name == "ResNet50V2") or (self.encoder_name == "resnet50v2"):
                segmentation_model = unet_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        dense_loop=self.dense_loop,
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).ResNet50V2()
            elif (self.encoder_name == "ResNet101") or (self.encoder_name == "resnet101"):
                segmentation_model = unet_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        dense_loop=self.dense_loop,
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).ResNet101()
            elif (self.encoder_name == "ResNet101V2") or (self.encoder_name == "resnet101v2"):
                segmentation_model = unet_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        dense_loop=self.dense_loop,
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).ResNet101V2()
            elif (self.encoder_name == "ResNet152") or (self.encoder_name == "resnet152"):
                segmentation_model = unet_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        dense_loop=self.dense_loop,
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).ResNet152()
            elif (self.encoder_name == "ResNet152V2") or (self.encoder_name == "resnet152v2"):
                segmentation_model = unet_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        dense_loop=self.dense_loop,
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).ResNet152V2()
            elif (self.encoder_name == "VGG16") or (self.encoder_name == "vgg16"):
                segmentation_model = unet_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        dense_loop=self.dense_loop,
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).VGG16()
            elif (self.encoder_name == "DenseNet121") or (self.encoder_name == "densenet121"):
                segmentation_model = unet_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        dense_loop=self.dense_loop,
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).DenseNet121()
            elif (self.encoder_name == "DenseNet169") or (self.encoder_name == "densenet169"):
                segmentation_model = unet_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        dense_loop=self.dense_loop,
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).DenseNet169()
            elif (self.encoder_name == "DenseNet201") or (self.encoder_name == "densenet201"):
                segmentation_model = unet_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        dense_loop=self.dense_loop,
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).DenseNet201()
            elif (self.encoder_name == "MobileNet") or (self.encoder_name == "mobilenet"):
                segmentation_model = unet_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        dense_loop=self.dense_loop,
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).MobileNet()
            elif (self.encoder_name == "MobileNetV2") or (self.encoder_name == "mobilenetv2"):
                segmentation_model = unet_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        dense_loop=self.dense_loop,
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).MobileNetV2()
            elif (self.encoder_name == "MobileNetV3Small") or (self.encoder_name == "mobilenetv3small") or (self.encoder_name == "MobileNetV3S") or (encoder_name == "MobileNetV3_Small"):
                segmentation_model = unet_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        dense_loop=self.dense_loop,
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).MobileNetV3Small()
            elif (self.encoder_name == "MobileNetV3Large") or (self.encoder_name == "mobilenetv3large") or (self.encoder_name == "MobileNetV3L") or (encoder_name == "MobileNetV3_Large"):
                segmentation_model = unet_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        dense_loop=self.dense_loop,
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).MobileNetV3Large()
            elif (self.encoder_name == "InceptionV3") or (self.encoder_name == "inceptionv3") or (self.encoder_name == "Inception_V3"):
                segmentation_model = unet_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        dense_loop=self.dense_loop,
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).InceptionV3()
            elif (self.encoder_name == "InceptionResNetV2") or (self.encoder_name == "inceptionresnetV2") or (self.encoder_name == "InceptionResNet_V2"):
                segmentation_model = unet_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        dense_loop=self.dense_loop,
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).InceptionResNetV2()
            elif (self.encoder_name == "EfficientNetB0") or (self.encoder_name == "efficientnetb0"):
                segmentation_model = unet_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        dense_loop=self.dense_loop,
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).EfficientNetB0()
            elif (self.encoder_name == "EfficientNetB1") or (self.encoder_name == "efficientnetb1"):
                segmentation_model = unet_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        dense_loop=self.dense_loop,
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).EfficientNetB1()
            elif (self.encoder_name == "EfficientNetB2") or (self.encoder_name == "efficientnetb2"):
                segmentation_model = unet_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        dense_loop=self.dense_loop,
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).EfficientNetB2()
            elif (self.encoder_name == "EfficientNetB3") or (self.encoder_name == "efficientnetb3"):
                segmentation_model = unet_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        dense_loop=self.dense_loop,
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).EfficientNetB3()
            elif (self.encoder_name == "EfficientNetB4") or (self.encoder_name == "efficientnetb4"):
                segmentation_model = unet_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        dense_loop=self.dense_loop,
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).EfficientNetB4()
            elif (self.encoder_name == "EfficientNetB5") or (self.encoder_name == "efficientnetb5"):
                segmentation_model = unet_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        dense_loop=self.dense_loop,
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).EfficientNetB5()
            elif (self.encoder_name == "EfficientNetB6") or (self.encoder_name == "efficientnetb6"):
                segmentation_model = unet_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        dense_loop=self.dense_loop,
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).EfficientNetB6()
            elif (self.encoder_name == "EfficientNetB7") or (self.encoder_name == "efficientnetb7"):
                segmentation_model = unet_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        dense_loop=self.dense_loop,
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).EfficientNetB7()
            elif (self.encoder_name == "EfficientNetV2B0") or (self.encoder_name == "efficientnetv2b0"):
                segmentation_model = unet_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        dense_loop=self.dense_loop,
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).EfficientNetV2B0()
            elif (self.encoder_name == "EfficientNetV2B1") or (self.encoder_name == "efficientnetv2b1"):
                segmentation_model = unet_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        dense_loop=self.dense_loop,
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).EfficientNetV2B1()
            elif (self.encoder_name == "EfficientNetV2B2") or (self.encoder_name == "efficientnetv2b2"):
                segmentation_model = unet_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        dense_loop=self.dense_loop,
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).EfficientNetV2B2()
            elif (self.encoder_name == "EfficientNetV2B3") or (self.encoder_name == "efficientnetv2b3"):
                segmentation_model = unet_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        dense_loop=self.dense_loop,
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).EfficientNetV2B3()
            elif (self.encoder_name == "EfficientNetV2S") or (self.encoder_name == "efficientnetv2s"):
                segmentation_model = unet_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        dense_loop=self.dense_loop,
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).EfficientNetV2S()
            elif (self.encoder_name == "EfficientNetV2M") or (self.encoder_name == "efficientnetv2m"):
                segmentation_model = unet_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        dense_loop=self.dense_loop,
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).EfficientNetV2M()
            elif (self.encoder_name == "EfficientNetV2L") or (self.encoder_name == "efficientnetv2l"):
                segmentation_model = unet_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        dense_loop=self.dense_loop,
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).EfficientNetV2L()
            elif (self.encoder_name == "CheXNet") or (self.encoder_name == "chexnet"):
                segmentation_model = unet_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        dense_loop=self.dense_loop,
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).CheXNet()
            else:
                raise ValueError("Please provide a valid/available -UNet Model- e.g., UNet, UNet++, etc.")
        elif (self.model_genre == "FPN") or (self.model_genre == "fpn"):
            if (self.encoder_name == "ResNet50") or (self.encoder_name == "resnet50"):
                segmentation_model = fpn_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).ResNet50()
            elif (self.encoder_name == "ResNet50V2") or (self.encoder_name == "resnet50v2"):
                segmentation_model = fpn_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).ResNet50V2()
            elif (self.encoder_name == "ResNet101") or (self.encoder_name == "resnet101"):
                segmentation_model = fpn_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).ResNet101()
            elif (self.encoder_name == "ResNet101V2") or (self.encoder_name == "resnet101v2"):
                segmentation_model = fpn_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).ResNet101V2()
            elif (self.encoder_name == "ResNet152") or (self.encoder_name == "resnet152"):
                segmentation_model = fpn_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).ResNet152()
            elif (self.encoder_name == "ResNet152V2") or (self.encoder_name == "resnet152v2"):
                segmentation_model = fpn_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).ResNet152V2()
            elif (self.encoder_name == "VGG16") or (self.encoder_name == "vgg16"):
                segmentation_model = fpn_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).VGG16()
            elif (self.encoder_name == "DenseNet121") or (self.encoder_name == "densenet121"):
                segmentation_model = fpn_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).DenseNet121()
            elif (self.encoder_name == "DenseNet169") or (self.encoder_name == "densenet169"):
                segmentation_model = fpn_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).DenseNet169()
            elif (self.encoder_name == "DenseNet201") or (self.encoder_name == "densenet201"):
                segmentation_model = fpn_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).DenseNet201()
            elif (self.encoder_name == "MobileNet") or (self.encoder_name == "mobilenet"):
                segmentation_model = fpn_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).MobileNet()
            elif (self.encoder_name == "MobileNetV2") or (self.encoder_name == "mobilenetv2"):
                segmentation_model = fpn_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).MobileNetV2()
            elif (self.encoder_name == "MobileNetV3Small") or (self.encoder_name == "mobilenetv3small") or (self.encoder_name == "MobileNetV3S") or (encoder_name == "MobileNetV3_Small"):
                segmentation_model = fpn_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).MobileNetV3Small()
            elif (self.encoder_name == "MobileNetV3Large") or (self.encoder_name == "mobilenetv3large") or (self.encoder_name == "MobileNetV3L") or (encoder_name == "MobileNetV3_Large"):
                segmentation_model = fpn_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).MobileNetV3Large()
            elif (self.encoder_name == "InceptionV3") or (self.encoder_name == "inceptionv3") or (self.encoder_name == "Inception_V3"):
                segmentation_model = fpn_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).InceptionV3()
            elif (self.encoder_name == "InceptionResNetV2") or (self.encoder_name == "inceptionresnetV2") or (self.encoder_name == "InceptionResNet_V2"):
                segmentation_model = fpn_model_builder(self.decoder_name,
                                                        self.imlength,
                                                        self.imwidth,
                                                        self.model_width,
                                                        self.model_depth,
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums,
                                                        ds=self.D_S,
                                                        ae=self.A_E,
                                                        ag=self.A_G,
                                                        lstm=self.LSTM,
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation,
                                                        train_mode=self.train_mode,
                                                        is_base_model_trainable=self.is_base_model_trainable).InceptionResNetV2()
            elif (self.encoder_name == "EfficientNetB0") or (self.encoder_name == "efficientnetb0"):
                segmentation_model = fpn_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).EfficientNetB0()
            elif (self.encoder_name == "EfficientNetB1") or (self.encoder_name == "efficientnetb1"):
                segmentation_model = fpn_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).EfficientNetB1()
            elif (self.encoder_name == "EfficientNetB2") or (self.encoder_name == "efficientnetb2"):
                segmentation_model = fpn_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).EfficientNetB2()
            elif (self.encoder_name == "EfficientNetB3") or (self.encoder_name == "efficientnetb3"):
                segmentation_model = fpn_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM,
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).EfficientNetB3()
            elif (self.encoder_name == "EfficientNetB4") or (self.encoder_name == "efficientnetb4"):
                segmentation_model = fpn_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM,
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).EfficientNetB4()
            elif (self.encoder_name == "EfficientNetB5") or (self.encoder_name == "efficientnetb5"):
                segmentation_model = fpn_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM,
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).EfficientNetB5()
            elif (self.encoder_name == "EfficientNetB6") or (self.encoder_name == "efficientnetb6"):
                segmentation_model = fpn_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).EfficientNetB6()
            elif (self.encoder_name == "EfficientNetB7") or (self.encoder_name == "efficientnetb7"):
                segmentation_model = fpn_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).EfficientNetB7()
            elif (self.encoder_name == "EfficientNetV2B0") or (self.encoder_name == "efficientnetv2b0"):
                segmentation_model = fpn_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).EfficientNetV2B0()
            elif (self.encoder_name == "EfficientNetV2B1") or (self.encoder_name == "efficientnetv2b1"):
                segmentation_model = fpn_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).EfficientNetV2B1()
            elif (self.encoder_name == "EfficientNetV2B2") or (self.encoder_name == "efficientnetv2b2"):
                segmentation_model = fpn_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM,
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).EfficientNetV2B2()
            elif (self.encoder_name == "EfficientNetV2B3") or (self.encoder_name == "efficientnetv2b3"):
                segmentation_model = fpn_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM,
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).EfficientNetV2B3()
            elif (self.encoder_name == "EfficientNetV2S") or (self.encoder_name == "efficientnetv2s"):
                segmentation_model = fpn_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).EfficientNetV2S()
            elif (self.encoder_name == "EfficientNetV2M") or (self.encoder_name == "efficientnetv2m"):
                segmentation_model = fpn_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).EfficientNetV2M()
            elif (self.encoder_name == "EfficientNetV2L") or (self.encoder_name == "efficientnetv2l"):
                segmentation_model = fpn_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).EfficientNetV2L()
            elif (self.encoder_name == "CheXNet") or (self.encoder_name == "chexnet"):
                segmentation_model = fpn_model_builder(self.decoder_name, 
                                                        self.imlength, 
                                                        self.imwidth, 
                                                        self.model_width, 
                                                        self.model_depth, 
                                                        num_channels=self.num_channels,
                                                        output_nums=self.output_nums, 
                                                        ds=self.D_S, 
                                                        ae=self.A_E, 
                                                        ag=self.A_G, 
                                                        lstm=self.LSTM, 
                                                        feature_number=self.feature_number,
                                                        is_transconv=self.is_transconv,
                                                        alpha=self.alpha,
                                                        q=self.q,
                                                        final_activation=self.final_activation, 
                                                        train_mode=self.train_mode, 
                                                        is_base_model_trainable=self.is_base_model_trainable).CheXNet()
            else:
                raise ValueError("Please provide a valid/available -UNet Model- e.g., UNet, UNet++, etc.")
        else:
            raise ValueError("Please provide a valid/available -Model Genre- e.g., UNet (unet or U-Net), FPN (fpn), etc.")
        return segmentation_model


if __name__ == '__main__':
    # Configurations
    imlength = 224  # Length of each Image
    imwidth = 224  # Width of each Image
    model_genre = 'UNet'  # Major Model Genre or Generation: UNet, FPN, LinkNet, etc.
    encoder_name = 'InceptionResNetV2'  # Decoder Architecture (UNet, UNetPP, SelfUNet, etc.)
    decoder_name = 'SelfUNetPP'  # Decoder Architecture (UNet, UNetPP, SelfUNet, etc.)
    model_width = 16  # Width of the Initial Layer, subsequent layers start from here
    model_depth = 5  # Depth or Number of Layers in the Model (Maximum 5, Minimum 1)
    D_S = 1  # Turn on Deep Supervision
    A_E = 0  # Turn on AutoEncoder Mode for Feature Extraction
    A_G = 1  # Turn on for Guided Attention
    LSTM = 1  # Turn on for LSTM
    num_dense_loop = 2  # Number of Dense Blocks in the BottleNeck Layer
    output_nums = 1  # Number of Classes for Classification Problems, always '1' for Regression Problems
    is_transconv = True  # True: Transposed Convolution, False: UpSampling
    train_mode = 'pretrained_encoder'  # Training Modes: 'pretrained_encoder' or 'from_scratch'
    base_model_trainable = False  # Whether Base Model is trainable or not. True: Fine Tuning Mode, False: Freeze or Inference only Mode
    feature_number = 1024  # Number of Features to be Extracted
    q = 3  # q-order for Self-ONNs
    Model = model_selector(model_genre,
                           encoder_name,
                           decoder_name, 
                           imlength, 
                           imwidth, 
                           model_width, 
                           model_depth, 
                           output_nums=output_nums,
                           ds=D_S, 
                           ae=A_E, 
                           ag=A_G, 
                           lstm=LSTM, 
                           dense_loop=num_dense_loop, 
                           q=q, 
                           is_transconv=is_transconv, 
                           train_mode=train_mode,
                           is_base_model_trainable=base_model_trainable).segmentation_model()
    Model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.0005), loss=tf.keras.losses.MeanAbsoluteError(), metrics=tf.keras.metrics.MeanSquaredError())
    Model.summary()